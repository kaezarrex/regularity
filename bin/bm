#! /usr/bin/env python

from copy import deepcopy
import datetime
from itertools import imap, izip
import logging
import math
from operator import itemgetter
import pytz
import re

from regularity.api.client import API
from regularity.config import load_config, write_config
from regularity.sparkline import Sparkline
from regularity.stats import EventStats
from regularity.table import Table
 
def int_or_zero(o):
    '''Return the int representation of the object or 0.

       @param o : object
           the object to convert into an int'''

    try:
        return int(o)
    except:
        return 0

def parse_offset(offset):
    '''Parse a string intended to define an offset from now.

       @param offset : str
           the offset from now'''

    match = re.match(r'([-+])?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?$', offset)

    if match is None:
        return None

    groups = match.groups()
    if not any(groups[1:]):
        # only the sign was specified
        return None
    
    sign = groups[0]

    hours = int_or_zero(groups[2])
    minutes = int_or_zero(groups[4])
    seconds = int_or_zero(groups[6])

    seconds = hours * 3600 + minutes * 60 + seconds

    if '-' == sign:
        seconds = -seconds

    delta_time = datetime.timedelta(seconds=seconds)
    return datetime.datetime.utcnow() + delta_time

def parse_time_of_day(time):
    '''Parse a string intended to define a time of day, in 24 hour format

       @time : str
           the time of day'''

    match = re.match(r'(2[0-3]|[0-1][0-9]):([0-5][0-9])$', time)
    if match:
        hours = match.group(1)
        minutes = match.group(2)

        time = datetime.datetime.now()
        time = time.replace(microsecond=0)

        if hours is not None:
            hours = int(hours)
            time = time.replace(hour=hours)

        if minutes is not None:
            minutes = int(minutes)
            time = time.replace(minute=minutes)

        time = time.replace(second=0, microsecond=0)

        utc_offset = datetime.datetime.utcnow() - datetime.datetime.now()
        return time + utc_offset

    return None

def parse_datetime(datetime_):
    '''Parse a string intended to define a datetime. Accepts dates in ISO 8601 
       format, that is YYYY-MM-DDTHH:MMZ.
       
       @param date : str
           a string representing a date'''

    datetime_ = datetime_.strip()

    match = re.match(r'^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})Z$', datetime_)

    if match:
        year = int(match.group(1))
        month = int(match.group(2))
        day = int(match.group(3))
        hour = int(match.group(4))
        minute = int(match.group(5))

        return datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute)

    return None

def parse_time(time):
    '''Parse a string intended to define a time. It can be specified as an
       offset from now, or a time for TODAY, or an ISO 8601 datetime. Offsets 
       are defined as a + or -, then a minute or hour:minute time string. If the
       string does not begin with a + or -, then the string is parsed as a time.
       Times are specified as either hour:minute or hour:minute:second strings.
       If the string cannot be parsed as a time, then it is parsed as a 
       datetime.

       @param time : str
           a string representing an offset or time of day'''

    time = time.strip()

    _time = parse_offset(time)
    if _time:
        return _time

    _time = parse_time_of_day(time)
    if _time:
        return _time

    _time = parse_datetime(time)
    if _time:
        return _time

    raise argparse.ArgumentTypeError('invalid time format')

def print_table(data, *args):
    '''Print the data in a tabular form.

       @param data : iterable(dict)
           an iterable of dicts
       @param args : positional parameters
           the keys to display'''

    rows = list()
    rows.append(args)
    for d in data:
        row = tuple(d.get(arg, '') for arg in args)
        rows.append(row)

    table = Table(*rows)

    print '\n'.join(table.iformatted_rows(column_joiner='   '))

def localize_data(data, timezone, *args):
    '''Convert datetimes in data from UTC to another timezone

        @param data : iterable(dict)
            an iterable of dicts
        @param timezone : string
            the timezone to convert to
        @param args : positional paramaters
            the keys to convert from UTC to another timezone'''

    _data = deepcopy(data)

    for d in _data:
        for arg in args:
            d[arg] = localize_datetime(d[arg], timezone)

    return _data

def localize_datetime(time, timezone):
    '''Convert a datetime from UTC to another timezone

        @param time : datetime
            the datetimetime to convert
        @param timezone : string
            the timezone to convert to'''

    tz =  pytz.timezone(timezone)
    utc_time = time.replace(tzinfo=pytz.utc)

    return utc_time.astimezone(tz)

def init(args):
    '''Initialize the configuration. Store the client information and the
       server information for all subsequent uses.

       @param args : argparse.Namespace
           the parsed command line options'''

    # reserve a client through the api
    api = API(args.host, args.port)
    data = api.init()

    # write out the preliminary configuration
    try:
        write_config(dict(
            client=str(data['_id']),
            host=args.host,
            port=args.port,
            timezone=args.timezone
        ), args.config)
    except BaseException as e:
        raise
        print str(e)
        sys.exit(1)

def get_config(config_path):
    '''Return the configuration in the file specified.
     
       @param config_path : str
           the path to the configuration file'''

    try:
        config = load_config(config_path)
    except BaseException as e:
        print str(e)
        sys.exit(1)

    return config

def dot(args):
    '''Log an activity that has no duration.

       @param args : argparse.Namespace
           the parsed command line options'''

    config = get_config(args.config)
    api = API(config['host'], config['port'], client=config['client'])

    timeline = 'bm'
    time = args.time

    if not time:
        time = datetime.datetime.utcnow()

    data = api.dot(timeline, args.activity, time)

    print data['_id']
    print localize_datetime(data['time'], config['timezone'])

def dash(args):
    '''Log an activity that has a duration.
      
       @param args : argparse.Namespace
           the parsed command line options'''

    config = get_config(args.config)
    api = API(config['host'], config['port'], client=config['client'])


    timeline = 'bm'
    now = datetime.datetime.utcnow()

    if args.time1:
        if args.time2:
            start = min(args.time1, args.time2)
            end = max(args.time1, args.time2)
        else:
            start = min(now, args.time1)
            end = max(now, args.time1)

    else:
        start = now
        running = True
        while running:
            try:
                time.sleep(1.0)
            except KeyboardInterrupt:
                running = False

        end = datetime.datetime.utcnow()

    data = api.dash(timeline, args.activity, start, end)

    print
    print data['_id']
    print localize_datetime(data['start'], config['timezone'])
    print localize_datetime(data['end'], config['timezone'])

def pending( args):
    '''Log the start time of an ongoing activity, to be terminated at another
       time.

       @param args : argparse.Namespace
           the parsed command line options'''

    config = get_config(args.config)
    api = API(config['host'], config['port'], client=config['client'])

    timeline = 'bm'
    start = args.time

    if not start:
        start = datetime.datetime.utcnow()

    data = api.pending(timeline, args.activity, start)

    print data['_id']
    print localize_datetime(data['start'], config['timezone'])
    if 'end' in data:
        print localize_datetime(data['end'], config['timezone'])

def list_(args):
    '''List the events requested in args.

       @param args : argparse.Namespace
           the parsed command line options'''

    config = get_config(args.config)
    api = API(config['host'], config['port'], client=config['client'])

    types = set(args.types)

    data = list()

    if '.' in types:
        dots = api.dots(name=args.name, limit=args.limit)
        for dot in dots:
            data.append(dict(
                name=dot['name'],
                type='dot',
                t1=dot['time']
            ))

    if '-' in types:
        dashes = api.dashes(name=args.name, limit=args.limit)
        for dash in dashes:
            data.append(dict(
                name=dash['name'],
                type='dash',
                t1=dash['start'],
                t2=dash['end'],
                duration=dash['end'] - dash['start']
            ))

    if '?' in types:
        pendings = api.pendings(name=args.name, limit=args.limit)
        for pending in pendings:
            data.append(dict(
                name=pending['name'],
                type='pending',
                t1=pending['start']
            ))

    def sort_key(d):
        if 't2' in d:
            return d['t2']
        return d['t1']

    data.sort(key=sort_key)

    print_table(data, 'name', 'type', 't1', 't2', 'duration')
    

#def stats(args):
#    '''Print out statistics for the query defined by the command line
#       parameters.
#
#       @param args : argparse.Namespace
#           the parsed command line options'''
#
#    events = model.events(
#        name=args.activity,
#        timeline=args.timelines
#    )
#
#    if args.max_duration:
#        duration_td = datetime.timedelta(seconds=args.max_duration)
#        events = list(e for e in events if e['end'] - e['start'] <= duration_td)
#
#    if not events:
#        print 'no events found'
#        return
#
#    s = EventStats(*events)
#    duration_bins = min(args.duration_bins, len(events))
#    bin_counts_duration = s.bin_counts_duration(duration_bins)
#    bin_counts_time_of_day = s.bin_counts_time_of_day(args.tod_bins)
#
#    def print_histogram(data, range_format):
#        sparkline = Sparkline(*imap(itemgetter(1), data))
#        icolumns = sparkline.icolumns(20, min_=0)
#
#        output = ((bin_range, bin_count, column) for (bin_range, bin_count), column in izip(data, icolumns))
#
#        table = Table(*output)
#        table.set_column_format(0, range_format)
#        table.set_column_format(1, '{:d}')
#        table.set_column_pad_left(1, True)
#
#        row_joiner = '\n                            '
#        print row_joiner.join(table.iformatted_rows(column_joiner='  ', pad_character=' '))
#        
#
#    print '%d events total' % len(events)
#    print 'min duration (seconds):     %0.2f' % s.min_duration()
#    print 'max duration (seconds):     %0.2f' % s.max_duration()
#    print 'average duration (seconds): %0.2f +/- %0.2f' % (s.mean_duration(), s.std_duration())
#    print 'duration breakdown:        ', 
#    print_histogram(bin_counts_duration, '{:0.2f}-{:0.2f}')
#    print '\ntime of day breakdown:     ', 
#    print_histogram(bin_counts_time_of_day, '{:s}-{:s}')
#
#    print
    

if __name__ == "__main__":

    import argparse
    from itertools import compress
    import os
    import readline
    import time

    import sys

    from regularity.model import Model

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', default=os.path.expanduser(os.path.join('~', '.regularity.json')))

    subparsers = parser.add_subparsers()

    init_parser = subparsers.add_parser('init')
    init_parser.add_argument('--host', default='localhost')
    init_parser.add_argument('--port', type=int, default=80)
    init_parser.add_argument('--timezone', default='UTC')
    init_parser.set_defaults(func=init)

    dot_parser = subparsers.add_parser('.')
    dot_parser.add_argument('activity')
    dot_parser.add_argument('time', type=parse_time, nargs='?')
    dot_parser.set_defaults(func=dot)

    dash_parser = subparsers.add_parser('-')
    dash_parser.add_argument('activity')
    dash_parser.add_argument('time1', type=parse_time, nargs='?', metavar='time')
    dash_parser.add_argument('time2', type=parse_time, nargs='?', metavar='time')
    dash_parser.set_defaults(func=dash)

    dash_parser = subparsers.add_parser('?')
    dash_parser.add_argument('activity')
    dash_parser.add_argument('time', type=parse_time, nargs='?', metavar='time')
    dash_parser.set_defaults(func=pending)

    list_parser = subparsers.add_parser('list')
    list_parser.add_argument('types', nargs='?', default='.-?')
    list_parser.add_argument('--limit', type=int, default=10)
    list_parser.add_argument('--name')
    list_parser.set_defaults(func=list_)

#    stats_parser = subparsers.add_parser('stats')
#    stats_parser.add_argument('activity', nargs='?')
#    stats_parser.add_argument('--duration-bins', type=int, default=5)
#    stats_parser.add_argument('--max-duration', type=int, default=None)
#    stats_parser.add_argument('-t', '--timeline', action='append', dest='timelines', default=None, metavar='timeline')
#    stats_parser.add_argument('--tod-bins', type=int, default=5)
#    stats_parser.set_defaults(func=stats)

    args = parser.parse_args()

#    model = Model()
    args.func(args)


