#! /usr/bin/env python

import datetime
import dbus
import dbus.mainloop.glib
import gobject
import logging
import os
import sys

from regularity.api.client import API
from regularity.config import load_config

class RegularityDaemon(object):

    def __init__(self, api):
        '''Create a RegularityDaemon, which logs to the database the active
           application over time. It will also log when the screensaver becomes
           active.

           @param api : regularity.api.client.API
               the connection to the database'''

        self.api = api

        # create the dbus main loop, set it as the default dbus main loop
        dbus_main_loop = dbus.mainloop.glib.DBusGMainLoop()
        dbus.set_default_main_loop(dbus_main_loop)

        # create a bus object, and attach the signal receivers
        self.bus = dbus.SessionBus()
        self.bind_events()
        
        self.timestamps = dict(
            application=datetime.datetime.utcnow(),
            screensaver=datetime.datetime.utcnow()
        )

    def path_to_application(self, path):
        '''Resolve an application dbus object path to a name.'''

        return self.bus.call_blocking('org.ayatana.bamf', path, 'org.ayatana.bamf.view', 'Name', None, tuple())

    def on_active_application_changed(self, from_path, to_path):
        '''The signal handler for active application changes.
        
           @param from_path : dbus.String
               the dbus path of the window we are switching from
           @param to_path : dbus.String
               the dbus path of the window we are switching to'''

        start = self.timestamps['application']
        now = datetime.datetime.utcnow()

        if from_path:
            application = self.path_to_application(from_path)
            logging.info('switching away from application: %s' % application)
            self.api.dash('regularityd', from_path, start, now)

        self.timestamps['application'] = now

    def bind_active_application_changed(self):
        '''Bind to the signal that fires when the active application changes.'''

        self.bus.add_signal_receiver(
            self.on_active_application_changed,
            'ActiveApplicationChanged',
            'org.ayatana.bamf.matcher'
        )

    def on_screensaver_active_changed(self, screensaver_active):
        '''The signal handler for screensaver state changes.
        
           @param screensaver_active : dbus.Boolean
               whether the screensaver is active right now'''

        logging.info('screensaver active: %s' % screensaver_active)
        now = datetime.datetime.utcnow()

        if not screensaver_active:
            start = self.timestamps['screensaver']

            self.api.dash('screensaver', 'screensaver', start, now)

        self.timestamps['screensaver'] = now

    def bind_screensaver_active_changed(self):
        '''Bind to the signal that fires when the screensaver state changes.'''

        self.bus.add_signal_receiver(
            self.on_screensaver_active_changed,
            'ActiveChanged',
            'org.gnome.ScreenSaver'
        )

    def bind_events(self):
        '''A wrapper method for binding to all signals of interest.'''

        self.bind_active_application_changed()
        self.bind_screensaver_active_changed()

    def run(self):
        '''Log the initial state, set up the timeout, and begin the main loop.'''
           
        gobject.MainLoop().run()

if __name__ == "__main__":

    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--config', default=os.path.expanduser(os.path.join('~', 'regularity.json')))
    parser.add_argument('--debug', action='store_true', default=False)
    parser.add_argument('-f', '--frequency', metavar='seconds', type=float, default=1.0)

    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(
            level=logging.DEBUG
        )
    else:
        logging.basicConfig(
            level=logging.INFO
        )

    try:
        config = load_config(args.config)
    except BaseException as e:
        print str(e)
        sys.exit(1)

    api = API(config['host'], config['port'], client=config['client'])

    regularityd = RegularityDaemon(api)
    regularityd.run()
    
